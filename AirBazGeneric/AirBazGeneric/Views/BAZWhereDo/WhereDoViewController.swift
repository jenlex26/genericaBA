//
//  WhereDoViewController.swift
//  WalletSDK
//
//  Created Branchbit on 21/05/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Contacts
import WalletSDK

class WhereDoViewController: UIViewController, WhereDoViewProtocol {
    
    var presenter: WhereDoPresenterProtocol?
    
    //MARK: - @IBOutlets
    @IBOutlet weak var radarContainerView: UIView!
    @IBOutlet weak var fromWhichAccountView: UIView!
    @IBOutlet weak var radarView: UIView!
    @IBOutlet weak var searchView: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var balanceLabel: UILabel!
    @IBOutlet weak var stepViewWidth: NSLayoutConstraint!
    
    //MARK: - Properties
    var contacts = [CNContact]()
    let contactStore = CNContactStore()
    var walletInit: WalletSDKInit = WalletSDKInit.shared
    
    //MARK: - Life cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setView()
        getContacts()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        animateStepView()
//        setupBalance()
    }
    
    //MARK: - Methods
    func changeAccount(accountNumber: String){
        walletInit.changeAccountNumber(accountNumber: accountNumber)
    }
    
    func getContacts() {
        let keys: [CNKeyDescriptor] = [CNContactFormatter.descriptorForRequiredKeys(for: .fullName), CNContactPhoneNumbersKey as CNKeyDescriptor]
        let request = CNContactFetchRequest(keysToFetch: keys)
        
        do {
            try contactStore.enumerateContacts(with: request) { [weak self] (contact, stop) in
                guard let self = self else { return }
                self.contacts.append(contact)
            }
        } catch { print("unable to fetch contacts") }
    }
    
    func setView() {
        let radarIconViewController = walletInit.renderButton(delegate: self)

        
        addChild(radarIconViewController)

        radarView.addSubview(radarIconViewController.view)
        
        radarIconViewController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            radarIconViewController.view.topAnchor.constraint(equalTo: radarView.topAnchor),
            radarIconViewController.view.bottomAnchor.constraint(equalTo: radarView.bottomAnchor),
            radarIconViewController.view.leadingAnchor.constraint(equalTo: radarView.leadingAnchor),
            radarIconViewController.view.trailingAnchor.constraint(equalTo: radarView.trailingAnchor)
        ])
        
        let tapRadarContainerView = UITapGestureRecognizer(target: self, action: #selector(self.onClickRadar))
        
        radarContainerView.addGestureRecognizer(tapRadarContainerView)
        
        searchView.layer.cornerRadius = 5.0
        fromWhichAccountView.layer.cornerRadius = 5.0
        fromWhichAccountView.addShadow()
        
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        tableView.register(UINib(nibName: "ContactsCell", bundle: Bundle(for: WhereDoRouter.self)), forCellReuseIdentifier: "ContactsCell")
        tableView.register(UINib(nibName: "AccountsCell", bundle: Bundle(for: WhereDoRouter.self)), forCellReuseIdentifier: "AccountsCell")
    }
    
    private func setupBalance(){
        let balance = UserDefaults.standard.double(forKey: "balance")
        balanceLabel.attributedText = "$\(String(format: "%.2f", balance))".priceStyle(fontSize: 17.0, weight: .medium)
    }
    
    private func animateStepView() {
        view.layoutIfNeeded()
        stepViewWidth.constant = self.view.frame.width * 0.25
        UIView.animate(withDuration: 1.0, animations: {
            self.view.layoutIfNeeded()
        })
    }
    
    @objc
    private func onClickRadar(){
        let view = BAZAirBazRouter.createModule()
        
        self.navigationController?.pushViewController(view, animated: true)
    }
    //MARK: - @IBActions
    
    @IBAction func goBack(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func changeAccountAction(_ sender: Any) {
        changeAccount(accountNumber: "1234567890")
        changeLatAndLong(latitude: 19.0489671, longitude: -99.536513)
    }
    
    func changeLatAndLong(latitude: Double, longitude: Double) {
        walletInit.changeLatAndLong(latitude: latitude, longitude: longitude)
    }
}

//MARK: - UITableViewDataSource
extension WhereDoViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0:
            return 1
        default:
            return contacts.count
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            let cell = tableView.dequeueReusableCell(withIdentifier: "AccountsCell", for: indexPath) as! AccountsCell
            return cell
        default:
            let cell = tableView.dequeueReusableCell(withIdentifier: "ContactsCell", for: indexPath) as! ContactsCell
            let data = contacts[indexPath.row]
            
            cell.name.text = data.givenName
            cell.phoneNumber.text = data.phoneNumbers.count > 0 ? data.phoneNumbers[0].value.stringValue : "N/A"
            
            return cell
        }
    }
    
    
}

//MARK: - UITableViewDelegate
extension WhereDoViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0:
            return 80
        default:
            return 90
        }
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView()
        view.backgroundColor = .white
        let label = UILabel(frame: CGRect(x: 10, y: 0, width: tableView.frame.width - 20, height: 49))
        label.font = UIFont.systemFont(ofSize: 18.0, weight: .bold)
        label.textColor = .darkGray
        
        switch section {
        case 0:
            label.text = "A una de mis cuentas"
        default:
            label.text = "A otra persona"
        }
        
        let separatorView = UIView(frame: CGRect(x: 10, y: 49, width: tableView.frame.width - 20, height: 1.0))
        separatorView.backgroundColor = UIColor(red: 0.92, green: 0.92, blue: 0.92, alpha: 1.0)
        
        view.addSubview(label)
        view.addSubview(separatorView)
        return view
    }
}

//MARK: - RadarButtonDelegate
extension WhereDoViewController: RadarButtonDelegate{
    func onClick() {
        onClickRadar()
    }
}
